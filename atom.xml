<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[燕小七个人博客]]></title>
  <link href="http://stoneqi2007.github.io/atom.xml" rel="self"/>
  <link href="http://stoneqi2007.github.io/"/>
  <updated>2017-07-12T14:38:20+08:00</updated>
  <id>http://stoneqi2007.github.io/</id>
  <author>
    <name><![CDATA[燕小七]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[iOS之WebViewJavascriptBridge原理及源码分析]]></title>
    <link href="http://stoneqi2007.github.io/blog/2017/07/10/ioszhi-webviewjavascriptbridgeyuan-li-ji-yuan-ma-fen-xi/"/>
    <updated>2017-07-10T11:14:06+08:00</updated>
    <id>http://stoneqi2007.github.io/blog/2017/07/10/ioszhi-webviewjavascriptbridgeyuan-li-ji-yuan-ma-fen-xi</id>
    <content type="html"><![CDATA[<h2>前言</h2>

<p>在iOS开发中经常会用到native和h5的交互，本文主要介绍UIWebView（iOS8中可以用WKWebView，本文以UIWebView为例）和JavaScript交互的原理以及WebViewJavascriptBridge的源码分析。</p>

<h2>1.WebViewJavascriptBridge原理</h2>

<p>在梳理WebViewJavascriptBridge原理之前，先要明确两点：</p>

<ul>
<li><p>JavaScript不能直接调用native的方法</p></li>
<li><p>native能直接调用JavaScript的代码，具体是通过下面的方式</p>

<pre><code class="objective-c">[webView stringByEvaluatingJavaScriptFromString:javascriptCommand];    
</code></pre></li>
</ul>


<p>JavaScript虽然不能直接调用native的方法，但是可以通过一些其他的方式实现，对的，就是做url拦截（UIWebView是用的webView: shouldStartLoadWithRequest: navigationType:的代理方法，而WKWebView是用的webView: decidePolicyForNavigationAction: decisionHandler:的代理方法），webView每次发起网络请求的时候都会走上面的代理方法，如果此时我们在这里返回的是我们自定义的url，那么拦截到以后我们就可以处理自己的事情，既然要处理自己的事情，那就需要在h5中去触发webView的代理方法，这就牵扯到url的重定向，有很多办法可以解决这个问题，比如以下两种：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. 创建 iframe 标签
</span><span class='line'>    WebViewJavascriptBridge 中就是用的这种方法。
</span><span class='line'>2. 设置 window 的 location
</span><span class='line'>    window.location = "/www/phpStudy/JS/helloJS.html";</span></code></pre></td></tr></table></div></figure>


<h2>2.WebViewJavascriptBridge基本使用</h2>

<h3>在h5注册事件</h3>

<ol>
<li><p>在h5端注册名为testJavascriptHandler的事件，并定义对来自native的消息处理函数function(message, responseCallback)，在处理完成以后，调用回调函数responseCallback(data)，将处理后的数据回调给native。</p>

<pre><code class="objective-c">bridge.registerHandler('testJavascriptHandler', function(data, responseCallback) {
         log('ObjC called testJavascriptHandler with', data)
         var responseData = { 'Javascript Says':'Right back atcha!' }
         log('JS responding with', responseData)
         responseCallback(responseData)
     })      
</code></pre></li>
<li><p>在native调用h5注册的testJavascriptHandler，将native的消息传递给h5，同时定义responseCallback块，来处理h5回调给native的数据。</p>

<pre><code class="objective-c">id data = @{ @"greetingFromObjC": @"Hi there, JS!" };
    [_bridge callHandler:@"testJavascriptHandler" data:data responseCallback:^(id response) {
        NSLog(@"testJavascriptHandler responded: %@", response);
    }];
</code></pre></li>
</ol>


<h3>在native注册事件</h3>

<ol>
<li><p>在native注册名为testObjcCallback的事件，并定义对来自h5的消息的处理函数handler，并在处理完成后，调用回调函数responseCallback(data)，并将处理后的数据回调给h5。</p>

<pre><code class="objective-c"> [_bridge registerHandler:@"testObjcCallback" handler:^(id data, WVJBResponseCallback responseCallback) {
        NSLog(@"testObjcCallback called: %@", data);
        responseCallback(@"Response from testObjcCallback");
    }];
</code></pre></li>
<li><p>在h5调用native注册的testObjcCallback事件，将h5端的消息传递给native，同时定义responseCallback</p>

<p>的block块，来处理native回调给h5的数据。</p>

<pre><code class="objective-c">var data = 'Hello from JS button'
bridge.callHandler('testObjcCallback', {'foo': 'bar'}, function(response) {
             log('JS got response', response)
         })
</code></pre></li>
</ol>


<h2>3.WebViewJavascriptBridge的基本类</h2>

<h3>WebViewJavascriptBridgeBase</h3>

<h4>属性：</h4>

<p>startupMessageQueue：在WebViewJavascriptBridge的js文件还没有载入以前，先把native发送给h5的message存储在startupMessageQueue数组中，一旦WebViewJavascriptBridge的js文件载入以后就遍历处理存储的消息。</p>

<p>responseCallbacks：用native调用h5时，定义的WVJBResponseCallback类型的block块，以objc_cb_xx（callbackId）为key，存储在responseCallbacks字典中。</p>

<p>messageHandlers：存储注册在native端的事件处理函数。以注册的事件名为key，以注册事件时定义的WVJBHandler类型的block块为value。</p>

<p>messageHandler：在native注册的默认的事件的处理函数。</p>

<p>delegate：指遵守WebViewJavascriptBridgeBaseDelegate协议的类，在这里指的就是WebViewJavascriptBridge/WKWebViewJavascriptBridge，这两个类都遵守该协议，并通过该协议的_evaluateJavascript方法，调用js命令。</p>

<h4>方法：</h4>

<p><code>+(void)enableLogging</code>：是否能够log</p>

<p><code>+(void)setLogMaxLength:(int)length</code>：设置log最大长度</p>

<p><code>-(void)reset</code>：重置方法</p>

<p><code>-(void)sendData:(id)data responseCallback:(WVJBResponseCallback)responseCallback handlerName:(NSString*)handlerName</code>：从native调用h5的方法</p>

<p><code>-(void)flushMessageQueue:(NSString *)messageQueueString</code>：处理h5传递过来的消息字符串</p>

<p><code>-(void)injectJavascriptFile</code>：注册js文件</p>

<p><code>- (BOOL)isCorrectProcotocolScheme:(NSURL*)url</code></p>

<p><code>- (BOOL)isQueueMessageURL:(NSURL*)url</code></p>

<p><code>- (BOOL)isBridgeLoadedURL:(NSURL*)url</code></p>

<p><code>- (void)logUnkownMessage:(NSURL*)url</code>:打印未知消息</p>

<p><code>- (NSString *)webViewJavascriptCheckCommand</code>：返回js命令，该命令用于检查js文件中WebViewJavascriptBridge的对象是否创建好。</p>

<p><code>- (NSString *)webViewJavascriptFetchQueyCommand</code>：:返回js命令，该命令用于调用js中的_fetchQueue()函数</p>

<h3>WebViewJavascriptBridge</h3>

<h4>方法：</h4>

<p><code>+ (instancetype)bridgeForWebView:(WVJB_WEBVIEW_TYPE*)webView</code>：WebViewJavascriptBridge的初始化方法</p>

<p><code>+ (void)enableLogging</code>：是否能够log</p>

<p><code>+ (void)setLogMaxLength:(int)length</code>：设置log最大长度</p>

<p><code>- (void)registerHandler:(NSString*)handlerName handler:(WVJBHandler)handler</code>：注册事件方法</p>

<p><code>- (void)callHandler:(NSString*)handlerName</code>；</p>

<p><code>- (void)callHandler:(NSString*)handlerName data:(id)data</code>;</p>

<p><code>- (void)callHandler:(NSString*)handlerName data:(id)data responseCallback:(WVJBResponseCallback)responseCallback</code>;</p>

<p><code>- (void)setWebViewDelegate:(WVJB_WEBVIEW_DELEGATE_TYPE*)webViewDelegate</code>：设置代理</p>

<h3>WebViewJavascriptBridge_JS</h3>

<h4>属性：</h4>

<p><code>sendMessageQueue</code>：将传递给native的消息，暂存在sendMessageQueue数组中</p>

<p><code>messageHandlers</code>：存储注册在h5端的事件处理函数。以注册的事件名为key,以注册事件时定义的handler为value</p>

<p><code>messagingIframe</code>：通过改变messagingIframe.src来调用webview的<code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</code>方法，将处理流程回到native端</p>

<h4>方法：</h4>

<p>registerHandler：注册事件</p>

<p>callHandler：调用native注册的方法</p>

<p>_fetchQueue：将sendMessageQueue中的消息序列化为字符串</p>

<p>_dispatchMessageFromObjC：处理来自objc的消息</p>

<h2>3.WebViewJavascriptBridge源码解析</h2>

<h3>消息从native到h5</h3>

<ol>
<li><p>以调用testJavascriptHandler事件为例（UIWebView），调用callHandler:data:responseCallback：函数</p>

<pre><code class="objective-c">id data = @{ @"greetingFromObjC": @"Hi there, JS!" };
    [_bridge callHandler:@"testJavascriptHandler" data:data responseCallback:^(id response) {
        NSLog(@"testJavascriptHandler responded: %@", response);
    }];
</code></pre></li>
<li><p>调用<code>- (void)sendData:(id)data responseCallback:(WVJBResponseCallback)responseCallback handlerName:(NSString*)handlerName</code> 方法，最终组装成message为</p>

<p>{ callbackId = “objc_cb_2”; data ={greetingFromObjC = “Hi there, JS!”;}; handlerName = testJavascriptHandler;}</p>

<pre><code class="objective-c">- (void)sendData:(id)data responseCallback:(WVJBResponseCallback)responseCallback handlerName:(NSString* )handlerName {
    NSMutableDictionary* message = [NSMutableDictionary dictionary];

    if (data) {
        message[@"data"] = data;
    }

    if (responseCallback) {
        NSString* callbackId = [NSString stringWithFormat:@"objc_cb_%ld", ++_uniqueId];
        self.responseCallbacks[callbackId] = [responseCallback copy];
        message[@"callbackId"] = callbackId;
    }

    if (handlerName) {
        message[@"handlerName"] = handlerName;
    }
    [self _queueMessage:message];
}
</code></pre></li>
<li><p>调用<code>_queueMessage:</code>方法</p>

<pre><code class="objective-c">- (void)_queueMessage:(WVJBMessage*)message {
    if (self.startupMessageQueue) {
        [self.startupMessageQueue addObject:message];
    } else {
        [self _dispatchMessage:message];
    }
}
</code></pre></li>
<li><p>调用<code>_dispatchMessage：</code>最终在js中执行handleMessageFromObjC方法，执行流程进入js中</p>

<pre><code class="objective-c">- (void)_dispatchMessage:(WVJBMessage*)message {
    //序列化message
    NSString *messageJSON = [self _serializeMessage:message];
    [self _log:@"SEND" json:messageJSON];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\\" withString:@"\\\\"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\"" withString:@"\\\""];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\'" withString:@"\\\'"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\n" withString:@"\\n"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\r" withString:@"\\r"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\f" withString:@"\\f"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\u2028" withString:@"\\u2028"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\u2029" withString:@"\\u2029"];
   //js命令
   NSString * javascriptCommand = [NSString stringWithFormat:@"WebViewJavascriptBridge._handleMessageFromObjC('%@');", messageJSON];
    if ([[NSThread currentThread] isMainThread]) {
        //js中调用_handleMessageFromObjC(messageJSON)方法
        [self _evaluateJavascript:javascriptCommand];

    } else {
        dispatch_sync(dispatch_get_main_queue(), ^{
            [self _evaluateJavascript:javascriptCommand];
        });
    }
}
</code></pre></li>
<li><p>接着执行<code>_dispatchMessageFromObjC(messageJSON)</code>，反序列化messageJSON得到message</p>

<p>{ callbackId = “objc_cb_2”; data ={greetingFromObjC = “Hi there, JS!”;}; handlerName = testJavascriptHandler;}</p>

<pre><code class="objective-c">function _dispatchMessageFromObjC(messageJSON) {
     setTimeout(function _timeoutDispatchMessageFromObjC() {
         var message = JSON.parse(messageJSON);
         var messageHandler;
         var responseCallback;
         //此时responseId不存在
         if (message.responseId) {
             responseCallback = responseCallbacks[message.responseId];
             if (!responseCallback) {
                 return;
             }
             responseCallback(message.responseData);
             delete responseCallbacks[message.responseId];
         } else {
             if (message.callbackId) {
                 var callbackResponseId = message.callbackId;
                 //定义responseCallback
                 //responseCallback被调用，则调用_doSend函数
                 responseCallback = function(responseData) {
                     _doSend({ responseId:callbackResponseId, responseData:responseData });
                 };
             }
             //取出对应事件的处理函数
             var handler = messageHandlers[message.handlerName];
             try {
             //调用handler(,)，如果native需要回调数据，那么会在handler中调用responseCallback();
                 handler(message.data, responseCallback);
             } catch(exception) {
                 console.log("WebViewJavascriptBridge: WARNING: javascript handler threw.", message, exception);
             }
             if (!handler) {
                 console.log("WebViewJavascriptBridge: WARNING: no handler for message from ObjC:", message);
             }
         }
     });
 }
</code></pre></li>
<li><p>调用<code>_doSend(message, responseCallback)</code>函数,此时message为</p>

<p>{ responseId:”objc_cb_2”, responseData:{ ‘Javascript Says’:’Right back atcha!’ }},并且把message存储到sendMessageQueue</p>

<pre><code class="objective-c">function _doSend ( message, responseCallback) {
     if (responseCallback) {
         var callbackId = 'cb_'+(uniqueId++)+'_'+new Date().getTime()
         responseCallbacks[callbackId] = responseCallback
         message['callbackId'] = callbackId
     }
     sendMessageQueue.push(message)
     messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE
 }
</code></pre>

<p>注意：responseData为testJavascriptHandler的消息处理函数，处理后的数据</p>

<pre><code class="objective-c">bridge.registerHandler('testJavascriptHandler', function(data, responseCallback) {
         log('ObjC called testJavascriptHandler with', data)
         var responseData = { 'Javascript Says':'Right back atcha!' }
         log('JS responding with', responseData)
         responseCallback(responseData)
     })
</code></pre></li>
<li><p>由于上一步给messagingIframe.src重新赋值，所以url重定向，调用代理方法 <code>-  (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</code></p>

<pre><code class="objective-c">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
    if (webView != _webView) { return YES; }
    NSURL *url = [request URL];
    __strong WVJB_WEBVIEW_DELEGATE_TYPE* strongDelegate = _webViewDelegate;
    if ([_base isCorrectProcotocolScheme:url]) {
        if ([_base isBridgeLoadedURL:url]) {
            [_base injectJavascriptFile];
        } else if ([_base isQueueMessageURL:url]) {
        //[_base webViewJavascriptFetchQueyCommand]:生成js命令,WebViewJavascriptBridge._fetchQueue();
        //执行js命令，得到序列化的消息字符串:messageQueueString
            NSString *messageQueueString = [self _evaluateJavascript:[_base webViewJavascriptFetchQueyCommand]];
            [_base flushMessageQueue:messageQueueString];
        } else {
            [_base logUnkownMessage:url];
        }
        return NO;
    } else if (strongDelegate &amp;&amp; [strongDelegate respondsToSelector:@selector(webView:shouldStartLoadWithRequest:navigationType:)]) {
        return [strongDelegate webView:webView shouldStartLoadWithRequest:request navigationType:navigationType];
    } else {
        return YES;
    }
}
</code></pre></li>
<li><p>调用<code>flushMessageQueue:</code>方法,得到message为 {responseId:”objc_cb_2”, responseData:{ ‘Javascript Says’:’Right back atcha!’ }}，并根据responseId，从responseCallbacks中取出对应的block，进行回调，然后删除这对键值。</p></li>
</ol>


<pre><code class="```objective-c">   - (void)flushMessageQueue:(NSString *)messageQueueString{
       if (messageQueueString == nil || messageQueueString.length == 0) {
           NSLog(@"WebViewJavascriptBridge: WARNING: ObjC got nil while fetching the message queue JSON from webview. This can happen if the WebViewJavascriptBridge JS is not currently present in the webview, e.g if the webview just loaded a new page.");
           return;
       }
     //反序列化得到messages
       id messages = [self _deserializeMessageJSON:messageQueueString];
       for (WVJBMessage* message in messages) {
           if (![message isKindOfClass:[WVJBMessage class]]) {
               NSLog(@"WebViewJavascriptBridge: WARNING: Invalid %@ received: %@", [message class], message);
               continue;
           }
           [self _log:@"RCVD" json:message];

           NSString* responseId = message[@"responseId"];
         //此时responseId存在
           if (responseId) {
             //取出存储的WVJBResponseCallback类型的block块
               WVJBResponseCallback responseCallback = _responseCallbacks[responseId];
             //将从h5回调回来的数据传递给responseCallback
               responseCallback(message[@"responseData"]);
             //移除这对键值
               [self.responseCallbacks removeObjectForKey:responseId];
           } else {
               WVJBResponseCallback responseCallback = NULL;
               NSString* callbackId = message[@"callbackId"];
               if (callbackId) {
                   responseCallback = ^(id responseData) {
                       if (responseData == nil) {
                           responseData = [NSNull null];
                       }

                       WVJBMessage* msg = @{ @"responseId":callbackId, @"responseData":responseData };
                       [self _queueMessage:msg];
                   };
               } else {
                   responseCallback = ^(id ignoreResponseData) {
                       // Do nothing
                   };
               }

               WVJBHandler handler = self.messageHandlers[message[@"handlerName"]];

               if (!handler) {
                   NSLog(@"WVJBNoHandlerException, No handler for message from JS: %@", message);
                   continue;
               }

               handler(message[@"data"], responseCallback);
           }
       }
   }
</code></pre>

<h3>消息从h5到native</h3>

<ol>
<li><p>以调用testObjcCallback为例</p>

<pre><code class="objective-c">bridge.callHandler('testObjcCallback', {'foo': 'bar'}, function(response) {
             log('JS got response', response)
         })
//callHandler的定义   
function callHandler(handlerName, data, responseCallback) {
     _doSend({ handlerName:handlerName, data:data }, responseCallback)
         }
</code></pre></li>
<li><p>调用 <code>_doSend(message, responseCallback)</code>,最终message为</p>

<p>{handlerName:@”testObjcCallback” , data:{‘foo’: ‘bar’}, callbackId: cb_1_1477301893983} ，并且把消息存储到sendMessageQueue中</p>

<pre><code class="objective-c">function _doSend(message, responseCallback) {
     if (responseCallback) {
         var callbackId = 'cb_'+(uniqueId++)+'_'+new Date().getTime()
         responseCallbacks[callbackId] = responseCallback
         message['callbackId'] = callbackId
     }
     sendMessageQueue.push(message)
     messagingIframe.src = CUSTOM_PROTOCOL_SCHEME + '://' + QUEUE_HAS_MESSAGE
     }
</code></pre></li>
<li><p>messagingIframe.src被重新赋值，重定向到<code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</code> 函数</p>

<pre><code class="objective-c">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType {
    if (webView != _webView) { return YES; }
    NSURL *url = [request URL];
    __strong WVJB_WEBVIEW_DELEGATE_TYPE* strongDelegate = _webViewDelegate;
    if ([_base isCorrectProcotocolScheme:url]) {
        if ([_base isBridgeLoadedURL:url]) {
            [_base injectJavascriptFile];
        } else if ([_base isQueueMessageURL:url]) {
        //[_base webViewJavascriptFetchQueyCommand]:生成js命令,WebViewJavascriptBridge._fetchQueue();
        //执行js命令，得到序列化的消息字符串:messageQueueString
            NSString *messageQueueString = [self _evaluateJavascript:[_base webViewJavascriptFetchQueyCommand]];
            [_base flushMessageQueue:messageQueueString];
        } else {
            [_base logUnkownMessage:url];
        }
        return NO;
    } else if (strongDelegate &amp;&amp; [strongDelegate respondsToSelector:@selector(webView:shouldStartLoadWithRequest:navigationType:)]) {
        return [strongDelegate webView:webView shouldStartLoadWithRequest:request navigationType:navigationType];
    } else {
        return YES;
    }
</code></pre></li>
<li><p>调用flushMessageQueue:方法,序列化得到message为 {handlerName:@”testObjcCallback” , data:{‘foo’: ‘bar’}, callbackId: cb_11477301893983} ，并根据callbackId,从responseCallbacks中取出对应的block，进行回调</p>

<pre><code class="objective-c">- (void)flushMessageQueue:(NSString *)messageQueueString{
    if (messageQueueString == nil || messageQueueString.length == 0) {
        NSLog(@"WebViewJavascriptBridge: WARNING: ObjC got nil while fetching the message queue JSON from webview. This can happen if the WebViewJavascriptBridge JS is not currently present in the webview, e.g if the webview just loaded a new page.");
        return;
    }

    id messages = [self _deserializeMessageJSON:messageQueueString];
    for (WVJBMessage* message in messages) {
        if (![message isKindOfClass:[WVJBMessage class]]) {
            NSLog(@"WebViewJavascriptBridge: WARNING: Invalid %@ received: %@", [message class], message);
            continue;
        }
        [self _log:@"RCVD" json:message];

        NSString* responseId = message[@"responseId"];
       //此时responseId不存在
        if (responseId) {
            WVJBResponseCallback responseCallback = _responseCallbacks[responseId];
            responseCallback(message[@"responseData"]);
            [self.responseCallbacks removeObjectForKey:responseId];
        } else {
            WVJBResponseCallback responseCallback = NULL;
            NSString* callbackId = message[@"callbackId"];
            if (callbackId) {
              //定义responseCallback
                responseCallback = ^(id responseData) {
                    if (responseData == nil) {
                        responseData = [NSNull null];
                    }

                    WVJBMessage* msg = @{ @"responseId":callbackId, @"responseData":responseData };
                    [self _queueMessage:msg];
                };
            } else {
                responseCallback = ^(id ignoreResponseData) {
                    // Do nothing
                };
            }
            //根据handlerName从messageHandlers取出handler
            WVJBHandler handler = self.messageHandlers[message[@"handlerName"]];

            if (!handler) {
                NSLog(@"WVJBNoHandlerException, No handler for message from JS: %@", message);
                continue;
            }
            //调用handler
            handler(message[@"data"], responseCallback);
        }
    }
}
</code></pre></li>
<li><p>从上一步回调responseCallback,从而调用queueMessage方法, 此时的message为{responseId:@”cb_11477301893983” , responseData:@”Response from testObjcCallback”}</p>

<pre><code class="objective-c">- (void)_queueMessage:(WVJBMessage*)message {
    if (self.startupMessageQueue) {
        [self.startupMessageQueue addObject:message];
    } else {
        [self _dispatchMessage:message];
    }
}
</code></pre></li>
<li><p>调用_dispatchMessage:方法</p>

<pre><code class="objective-c">- (void)_dispatchMessage:(WVJBMessage*)message {
    //序列化message
    NSString *messageJSON = [self _serializeMessage:message];
    [self _log:@"SEND" json:messageJSON];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\\" withString:@"\\\\"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\"" withString:@"\\\""];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\'" withString:@"\\\'"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\n" withString:@"\\n"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\r" withString:@"\\r"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\f" withString:@"\\f"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\u2028" withString:@"\\u2028"];
    messageJSON = [messageJSON stringByReplacingOccurrencesOfString:@"\u2029" withString:@"\\u2029"];
    //生成js命令
    NSString* javascriptCommand = [NSString stringWithFormat:@"WebViewJavascriptBridge._handleMessageFromObjC('%@');", messageJSON];
    if ([[NSThread currentThread] isMainThread]) {
        //调用_handleMessageFromObjC(messageJSON)方法
        [self _evaluateJavascript:javascriptCommand];

    } else {
        dispatch_sync(dispatch_get_main_queue(), ^{
            [self _evaluateJavascript:javascriptCommand];
        });
    }
}
</code></pre></li>
<li><p>调用_handleMessageFromObjC(messageJSON)方法</p>

<pre><code class="objective-c">function _handleMessageFromObjC(messageJSON) {
     if (receiveMessageQueue) {
         receiveMessageQueue.push(messageJSON)
     } else {
         _dispatchMessageFromObjC(messageJSON)
     }
 }
</code></pre></li>
<li><p>调用dispatchMessageFromObjC(messageJSON),反序列化得到message为{responseId:@”cb_1_1477301893983” , responseData:@”Response from testObjcCallback”}，根据responseId,从responseCallbacks中取出对应的responseCallback函数，进行对应的回调处理。然后从responseCallbacks删除这对键值</p>

<pre><code class="objective-c">function _dispatchMessageFromObjC(messageJSON) {
     setTimeout(function _timeoutDispatchMessageFromObjC() {
         var message = JSON.parse(messageJSON);
         var messageHandler;
         var responseCallback;
          //responseId存在，responseCallbacks
         if (message.responseId) {
             responseCallback = responseCallbacks[message.responseId];
             if (!responseCallback) {
                 return;
             }
             responseCallback(message.responseData);
             delete responseCallbacks[message.responseId];
         } else {
             if (message.callbackId) {
                 var callbackResponseId = message.callbackId;
                 responseCallback = function(responseData) {
                     _doSend({ responseId:callbackResponseId, responseData:responseData });
                 };
             }

             var handler = messageHandlers[message.handlerName];
             try {
                 handler(message.data, responseCallback);
             } catch(exception) {
                 console.log("WebViewJavascriptBridge: WARNING: javascript handler threw.", message, exception);
             }
             if (!handler) {
                 console.log("WebViewJavascriptBridge: WARNING: no handler for message from ObjC:", message);
             }
         }
     });
 }
</code></pre>

<p>至此，native和h5互相之间调用的流程就全部梳理清楚了，如果文中有什么错误，欢迎大家指正。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github+Octopress 快速搭建自己的博客]]></title>
    <link href="http://stoneqi2007.github.io/blog/2017/07/06/github-plus-octopress-kuai-su-da-jian-zi-ji-de-bo-ke/"/>
    <updated>2017-07-06T18:44:14+08:00</updated>
    <id>http://stoneqi2007.github.io/blog/2017/07/06/github-plus-octopress-kuai-su-da-jian-zi-ji-de-bo-ke</id>
    <content type="html"><![CDATA[<p>今天完成了在Mac上使用Github+Octopress搭建自己专属的博客，在网上搜了一些相关的资料，趟了一些坑，于是决定把自己搭建博客的过程记录一下。</p>

<h3>Octopress 与 Jekyll &amp; Github Pages 的关系</h3>

<ol>
<li>Octopress 是基于Jekyll的静态博客框架</li>
<li>Github Pages 是用于显示托管在Github的静态网页，是Github提供的服务</li>
<li>也就是说我们是使用基于Jekyll的Octopress生成本地的静态网站，然后将静态网站托管到Github为我们提供的Github Pages 服务上，最后访问博客地址就可以显示我们的个人博客网站了</li>
</ol>


<h3>安装环境</h3>

<ol>
<li>Mac OS X系统（根据个人情况而定）</li>
<li>安装ruby，由于之前安装了cocoaPods，所以已经有ruby，一般来说，Mac OS X都是自带ruby的，这里对于安装ruby的过程不再多做介绍</li>
</ol>


<h3>本地安装Octopress</h3>

<ol>
<li><h4>将Octopress的项目clone到本地，终端执行命令行</h4>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
</code></pre>

<p>进入octopress目录</p>

<pre><code>$ cd octopress
</code></pre></li>
<li><h4>安装Octopress所需要的依赖库（dependencies）</h4>

<p>安装过程中可能遇到权限问题，所以需要在命令行前面加sudo再执行，并输入登录密码。</p>

<blockquote><p>注：<code>sudo</code> 全称是：<code>super user do</code>，也就是以 root 用户身份来执行</p></blockquote>

<pre><code>$ sudo gem install bundler
$ bundle install
</code></pre>

<p>这里在不翻墙的情况下，可能会遇到一个问题：<code>sudo gem install bundler</code> 执行后，一直没有响应。这是由于国内网络原因（你懂的），导致rubygems.org存放在 Amazon S3 上面的资源文件间歇性连接失败。所以你会遇到<code>gem install rack</code>或<code>bundle install</code> 的时候半天没有响应的情况。</p>

<p>但好消息是国内某大神帮我们解决了这一心头大患，我们可以用淘宝的Ruby镜像来替换原来的镜像。只需终端执行下面的命令即可：</p>

<pre><code>$ gem sources -a https://ruby.taobao.org/ -r https://rubygems.org/
</code></pre>

<p>然后执行如下命令查看切换后结果</p>

<pre><code>$ gem sources -l
</code></pre>

<p>如果看到如下输出：</p>

<pre><code>*** CURRENT SOURCES ***
https://ruby.taobao.org
</code></pre>

<p>这就说明我们切换到淘宝的 Ruby 镜像了，再次安装 Octopress 所需要的依赖库就会发现成功啦。</p>

<p>当然还有另外两种方法:</p>

<ol>
<li><p>比较原始的方法 -> 动更改：打开 <code>octopress/Gemfile</code>文件 -> 将 <code>source "https://rubygems.org"</code> 改为 <code>source "https://ruby.taobao.org"</code>就可以了</p></li>
<li><p>相对方便点，因为我们使用的是 Gemfile，所以我们可以用 Bundler 的 Gem 源代码镜像命令，这样我们就不用改 Gemfile 的 source 了。命令如下：</p>

<pre><code>$ cd octopress
$ bundle config mirror.https://rubygems.org https://ruby.taobao.org
</code></pre></li>
</ol>
</li>
<li><h4>安装默认主题</h4>

<p>终端执行下面命令，可以安装默认主题，当然也可以安装第三方的主题，这个留到下篇再详解。</p>

<pre><code> $ rake install
</code></pre></li>
<li><h4>内容预览</h4>

<p>到这里，我们已经在本地搭建好了一个简版的Octopress博客，是不是迫不及待的想看看效果，那就运行命令吧！</p>

<pre><code> $ rake preview
</code></pre>

<p>此时打开浏览器，输入localhost:4000，你就可以看到效果了，至此，本地Octopress安装过程就结束了。</p>

<p><img src="../images/2017/07/635689-9a554909effc43fe.jpg" alt="" /></p></li>
</ol>


<h3>本地的Octopress博客部署到Github Pages</h3>

<p>接下来，我们就需要将本地Octopress部署到Github Pages上，一起来看看具体步骤吧</p>

<ol>
<li><h4>新建Github repository</h4>

<p>登录个人的Github账号，新建Github repository，项目名称命名格式为username.github.io，username是你的Github用户名，例如你的Github用户名为XXXgithub，那么项目名称应该为XXXgithub.github.io，然后点击创建即可。</p></li>
<li><h4>配置 Github Pages</h4>

<p>在终端运行下面命令</p>

<pre><code>$ cd octopress
$ rake setup_github_pages
</code></pre>

<p>该命令会要求我们输入github仓库的url，复制粘贴一下新建仓库的SSH 或 HTTPS URL 即可，因为SSH需要注意配置SSH Key的问题，所以在此处我选择了HTTPS URL。</p>

<p>很多人也许会疑问，Octopress生成的静态页面是怎么与GitHub绑定的呢？</p>

<p>对的，就是rake setup_github_pages这行代码，那么它是怎么实现的呢？</p>

<p>用户的 Github Pages使用master分支作为Web服务的公开目录，为我们的博客主页（username.github.io）提供内容显示，因此，我们需要将与博客相关的源码存到某个分支上（这里是source分支），而master分支commit生成的博客内容供Web访问，Octopress就是通过这行代码帮我们搞定这些工作的。</p></li>
<li><h4>创建一篇文章</h4>

<p>终端执行命令</p>

<pre><code>$ rake new_post["title"]    #title为你的文章名，可随意更改
</code></pre>

<p>生成的新文章在source/_post目录下，我们可以用Markdown编辑器对文章进行编辑修改。</p>

<p>打开目录下的markdown文件（我目前用的Typora），会发现头部有如下内容（千万不可删除！！）</p>

<pre><code>layout: post
title: "Github+Octopress 快速搭建自己的博客"
date: 2017-07-06 18:44:14 +0800
comments: true
categories: 
</code></pre>

<p>下面我们就可以编辑自己的正文内容了。</p>

<p>正文编辑完成以后，终端运行如下命令即可生成静态网页</p>

<pre><code>$ rake generate
</code></pre>

<p>如果你想预览内容的话，则终端运行命令</p>

<pre><code>$ rake preview
</code></pre>

<p>此时，你可以在浏览器输入localhost:4000查看实际效果，如果没有问题的话，就可以将静态网页同步到GitHub上，终端运行命令</p>

<pre><code>$ rake deploy
</code></pre>

<blockquote><p>注意了，在这里我遇到了一个坑，每次执行rake deploy的时候，就会提示</p>

<p> ! [rejected]        master -> master (non-fast-forward)</p>

<p>error: failed to push some refs to &lsquo;<a href="https://github.com/stoneqi2007/stoneqi2007.github.io.git">https://github.com/stoneqi2007/stoneqi2007.github.io.git</a>&rsquo;</p>

<p>hint: Updates were rejected because the tip of your current branch is behind</p>

<p>hint: its remote counterpart. Integrate the remote changes (e.g.</p>

<p>hint: &lsquo;git pull &hellip;&rsquo;) before pushing again.</p>

<p>hint: See the &lsquo;Note about fast-forwards&rsquo; in &lsquo;git push &ndash;help&rsquo; for details.</p>

<p>在网上找了好久，最后找到解决办法：</p>

<p>$ cd octopress</p>

<p>打开Rakefile文件，找到system &ldquo;git push origin #{deploy_branch}"，在#前面加+，然后保存文件</p>

<p>重新执行$ rake deploy即可解决。</p></blockquote>

<p>你会看到静态页面已经被push到GitHub的master分支，然后等待几秒钟，访问博客主页username.github.io，就可以看到你创建的博客了。</p>

<p>如果你还想把自己的本地资源也同步到GitHub上，那么终端运行指令</p>

<pre><code>$ git add .
$ git commit -m "comment"  #comment可随意更改
$ git push origin source
</code></pre>

<p>这样本地的资源文件就上传到GitHub的source分支了。</p>

<blockquote><p>注意：<code>rake preview</code> 会自动监视文件的变化，重新生成静态页面。因此修改markdown文件后，只需要在浏览器里刷新一下页面，就立刻可以看到效果。不过如果修改了_config.yml的话，则需要<code>Ctrl+C</code>终止，用 <code>rake generate</code> 重新生成，才能看到效果。</p></blockquote>

<p>至此，我们就完成了个人博客的搭建，当然此时的博客略显简陋，我们可以根据自己的喜好重新包装自己的博客，至于怎么个性化定制自己的博客，会在后续的文章中给出。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[hello blog]]></title>
    <link href="http://stoneqi2007.github.io/blog/2017/07/06/hello-blog/"/>
    <updated>2017-07-06T15:56:59+08:00</updated>
    <id>http://stoneqi2007.github.io/blog/2017/07/06/hello-blog</id>
    <content type="html"><![CDATA[<p>快节奏的生活，碎片化的学习，最近感觉记东西越来越困难，很久以前就想创建博客，把平时工作或者生活中的点滴收获记录起来，今天总算开了个头，希望是个好的开始，培养好的习惯并且坚持下去，生活总会越来越好！Fighting！</p>
]]></content>
  </entry>
  
</feed>
